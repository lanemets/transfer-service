/*
 * This file is generated by jOOQ.
*/
package jooq.generated.money_transfer_schema.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.money_transfer_schema.Keys;
import jooq.generated.money_transfer_schema.MoneyTransferSchema;
import jooq.generated.money_transfer_schema.tables.records.AccountRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = -554763145;

    /**
     * The reference instance of <code>MONEY_TRANSFER_SCHEMA.ACCOUNT</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>MONEY_TRANSFER_SCHEMA.ACCOUNT.ACCOUNT_ID</code>.
     */
    public final TableField<AccountRecord, Long> ACCOUNT_ID = createField("ACCOUNT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR MONEY_TRANSFER_SCHEMA.SYSTEM_SEQUENCE_75DA1F0D_AA02_45C5_9CB6_BCC908C1550C)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>MONEY_TRANSFER_SCHEMA.ACCOUNT.ACCOUNT_INFO</code>.
     */
    public final TableField<AccountRecord, String> ACCOUNT_INFO = createField("ACCOUNT_INFO", org.jooq.impl.SQLDataType.VARCHAR.length(500), this, "");

    /**
     * Create a <code>MONEY_TRANSFER_SCHEMA.ACCOUNT</code> table reference
     */
    public Account() {
        this("ACCOUNT", null);
    }

    /**
     * Create an aliased <code>MONEY_TRANSFER_SCHEMA.ACCOUNT</code> table reference
     */
    public Account(String alias) {
        this(alias, ACCOUNT);
    }

    private Account(String alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(String alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MoneyTransferSchema.MONEY_TRANSFER_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.CONSTRAINT_E);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(String alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(name, null);
    }
}
